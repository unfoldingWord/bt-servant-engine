"""Intent types and models for the BT Servant application."""

from __future__ import annotations

from enum import Enum
from pydantic import BaseModel, ConfigDict, Field


class IntentType(str, Enum):
    """Enumeration of all supported user intents in the graph."""

    GET_BIBLE_TRANSLATION_ASSISTANCE = "get-bible-translation-assistance"
    CONSULT_FIA_RESOURCES = "consult-fia-resources"
    GET_PASSAGE_SUMMARY = "get-passage-summary"
    GET_PASSAGE_KEYWORDS = "get-passage-keywords"
    GET_TRANSLATION_HELPS = "get-translation-helps"
    RETRIEVE_SCRIPTURE = "retrieve-scripture"
    LISTEN_TO_SCRIPTURE = "listen-to-scripture"
    TRANSLATE_SCRIPTURE = "translate-scripture"
    PERFORM_UNSUPPORTED_FUNCTION = "perform-unsupported-function"
    RETRIEVE_SYSTEM_INFORMATION = "retrieve-system-information"
    SET_RESPONSE_LANGUAGE = "set-response-language"
    SET_AGENTIC_STRENGTH = "set-agentic-strength"
    CONVERSE_WITH_BT_SERVANT = "converse-with-bt-servant"


class UserIntents(BaseModel):
    """Container for a list of user intents (legacy format).

    Used for backward compatibility with existing intent detection code.
    New code should use UserIntentsStructured for explicit context capture.
    """

    intents: list[IntentType]


class IntentWithContext(BaseModel):
    """An intent paired with the portion of the user's message that activates it.

    For multi-intent queries, each intent carries a `context_text` field containing
    the exact slice(s) of the user's message meant for that intent. Downstream
    handlers rely exclusively on this text when processing their work.
    """

    intent: IntentType = Field(..., description="The classified intent type")
    context_text: str = Field(
        ...,
        description=(
            "The relevant portion of the user query that triggered this intent. "
            "This text should be fluent and cover all necessary context, even when "
            "the original spans were non-contiguous."
        ),
    )

    def trimmed_context(self) -> str:
        """Return normalized context for downstream logging and processing."""
        return str(self.context_text or "").strip()

    model_config = ConfigDict(extra="ignore")


class UserIntentsStructured(BaseModel):
    """Enhanced intent detection with explicit context snippets.

    Each detected intent includes the exact portion of the user's message that
    should be handed to the downstream handler.
    """

    intents: list[IntentWithContext] = Field(
        ...,
        description="List of detected intents with their corresponding context text",
        min_length=1,
    )


class IntentQueueItem(BaseModel):
    """A queued intent waiting to be processed with its captured context."""

    intent: IntentType = Field(..., description="The intent to process")
    context_text: str = Field(
        "",
        description=(
            "The query snippet captured for this intent. "
            "Handlers must operate solely on this text when resuming the intent."
        ),
    )
    continuation_action: str = Field(
        default="",
        description=(
            "Pre-generated action phrase for continuation prompts "
            "(e.g., 'show key terms from Gen 4:2'). Generated by LLM at detection time."
        ),
    )
    created_at: float = Field(..., description="Unix timestamp when queued")
    original_query: str = Field(
        default="",
        description="Original user message for debugging/logging",
    )

    model_config = ConfigDict(extra="ignore")


class IntentQueue(BaseModel):
    """Persistent queue of intents for a specific user.

    When a user requests multiple things, we process them sequentially using
    continuation prompts. This queue persists in the user_state JSON DB.
    """

    items: list[IntentQueueItem] = Field(
        default_factory=list,
        description="Queued intents in priority order",
    )
    expires_at: float = Field(..., description="Unix timestamp when queue expires (TTL)")


__all__ = [
    "IntentType",
    "UserIntents",
    "IntentWithContext",
    "UserIntentsStructured",
    "IntentQueueItem",
    "IntentQueue",
]
